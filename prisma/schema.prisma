// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client{
  provider = "prisma-client-js"
}

enum UserRole{
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String 
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorConfirmation{
  id String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Server{
  id String @id @default(cuid())
  name String
  imageUrl String @db.Text
  inviteCode String @db.Text

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete:Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(cuid())
  role MemberRole @default(GUEST)

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete:Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
    id String @id @default(cuid())
    name String
    type ChannelType @default(TEXT)

  profileId String
  profile User @relation(fields: [profileId], references: [id], onDelete:Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}